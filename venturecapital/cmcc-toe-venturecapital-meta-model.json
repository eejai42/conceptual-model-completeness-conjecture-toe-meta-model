{
    "id": "CMCC_ToEMM_VentureCapital",    
        "meta-model": {
  "depends_on": [
    "CMCC_ToEMM_Finance",
    "CMCC_ToEMM_Economics"
  ],
  "version": "v2.0",
  "nickname": "venturecapital",
  "meta": {
    "title": "Venture Capital ToE Meta-Model",
    "subtitle": "A Declarative Schema for Startup Funding, Term Sheets, and Equity Splits",
    "authors": [
      {
        "name": "EJ Alexandra",
        "contact": "start@anabstractlevel.com",
        "affiliations": [
          "SSoT.me",
          "EffortlessAPI.com"
        ]
      }
    ],
    "date": "March 2025",
    "abstract": "This Venture Capital extension of the CMCC (Conceptual Model Completeness Conjecture) expands on the Finance and Economics models to capture the unique aspects of startup funding, equity structures, and term sheets. All rules—like pre-money valuations, cap tables, liquidation preferences—are stored as aggregator fields, ensuring one snapshot-consistent environment for all venture deals.",
    "executive_summary": {
      "key_points": [
        "Encodes common VC concepts (pre-money/post-money valuation, convertible notes, SAFEs, etc.) via aggregator logic tied to existing Finance/Economics data.",
        "Tracks term sheets, funding rounds, cap tables, and liquidation preferences with purely declarative constraints and formulas.",
        "Automatically reflects changes in economic indicators (e.g. interest rates, inflation) or corporate finances (from CMCC_ToEMM_Finance) on startup valuations, runway, etc.",
        "Facilitates cross-domain expansions: link advanced synergy from M&A or even devops cost modeling for a deeper analysis of startup burn rates."
      ],
      "implications": [
        "Removes the typical code sprawl for custom update logic in venture deals—aggregator fields keep valuations, ownership percentages, and liquidation waterfalls consistent at each commit.",
        "Allows large-scale scenario testing: e.g. changes in macro conditions or a series of funding events instantly reflow into updated cap tables or runway forecasts.",
        "Brings a single source of truth for funding data, bridging the gap between typical pitch-deck estimates and real transaction logs from the Finance/Economics models."
      ],
      "narrative": [
        {
          "title": "CMCC Venture Capital Extension",
          "content": [
            "Venture capital introduces specialized complexities like SAFE notes, convertible debt, cap table expansions, and multiple funding rounds. By placing these under the same aggregator-based logic that drives Finance and Economics, each new or amended term sheet triggers an immediate recalculation of ownership distributions, valuations, and potential outcomes in a single snapshot.",
            "That synergy means no more partial states where new shares are created but not reflected in the company's total equity, or a convertible note triggers messy manual cap table updates. Instead, aggregator constraints unify all data and keep the entire environment consistent. Cross-domain expansions are trivial—for instance, referencing devops cost data to refine the startup's burn rate or hooking in M&A logic for partial acquisitions or strategic investments."
          ]
        }
      ]
    }
  },
  "schema": {
    "entities": [
      {
        "name": "Startup",
        "description": "Represents an early-stage company seeking venture funding. Extends the Finance Company concept with additional aggregator fields for typical startup metrics.",
        "fields": [
          {
            "name": "id",
            "type": "scalar",
            "datatype": "string",
            "primary_key": true
          },
          {
            "name": "company_id",
            "type": "lookup",
            "target_entity": "CMCC_ToEMM_Finance.Company",
            "foreign_key": true,
            "description": "Links to the base finance 'Company' record for standard financial aggregator fields."
          },
          {
            "name": "founding_date",
            "type": "scalar",
            "datatype": "datetime"
          },
          {
            "name": "primary_focus",
            "type": "scalar",
            "datatype": "string",
            "description": "E.g., 'SaaS', 'BioTech', 'Marketplaces'."
          },
          {
            "name": "notes",
            "type": "scalar",
            "datatype": "string"
          }
        ],
        "lookups": [],
        "aggregations": [
          {
            "name": "burn_rate",
            "type": "rollup",
            "formula": "ComputeBurnRate(company_id, monthly_expenses, revenue_trend)",
            "description": "Conceptual aggregator referencing expenses vs. revenue to estimate monthly negative cash flow."
          },
          {
            "name": "runway_months",
            "type": "rollup",
            "formula": "IF(burn_rate>0, (company_id.total_assets / burn_rate), null)",
            "description": "Approx how many months until assets run out, ignoring new revenue or additional financing."
          }
        ],
        "lambdas": [],
        "constraints": []
      },
      {
        "name": "FundingRound",
        "description": "Represents a single round of venture funding (Seed, Series A, etc.) referencing valuations, amounts, new shares, etc.",
        "fields": [
          {
            "name": "id",
            "type": "scalar",
            "datatype": "string",
            "primary_key": true
          },
          {
            "name": "startup_id",
            "type": "lookup",
            "target_entity": "Startup",
            "foreign_key": true
          },
          {
            "name": "round_name",
            "type": "scalar",
            "datatype": "string",
            "description": "E.g. 'Seed','Series A','Series B', etc."
          },
          {
            "name": "pre_money_valuation",
            "type": "scalar",
            "datatype": "float",
            "description": "Valuation prior to the investment."
          },
          {
            "name": "amount_raised",
            "type": "scalar",
            "datatype": "float",
            "description": "Cash invested in this round."
          },
          {
            "name": "new_shares_issued",
            "type": "scalar",
            "datatype": "float",
            "description": "How many new shares or tokens are created for this round."
          },
          {
            "name": "notes",
            "type": "scalar",
            "datatype": "string"
          }
        ],
        "lookups": [],
        "aggregations": [
          {
            "name": "post_money_valuation",
            "type": "rollup",
            "formula": "pre_money_valuation + amount_raised",
            "description": "Naive aggregator for post-money = pre-money + new capital."
          },
          {
            "name": "investor_ownership_percent",
            "type": "rollup",
            "formula": "IF(post_money_valuation>0, (amount_raised / post_money_valuation)*100, 0)",
            "description": "Fraction of the startup that new investors own from this round."
          },
          {
            "name": "price_per_share",
            "type": "rollup",
            "formula": "IF(new_shares_issued>0, (amount_raised / new_shares_issued), null)",
            "description": "How much each share effectively costs in this round."
          }
        ],
        "lambdas": [
          {
            "name": "close_round",
            "parameters": [],
            "formula": "startup_id.company_id.total_assets += amount_raised; // simplistic approach, ignoring liabilities or partial uses.",
            "description": "Applies the raised amount to the startup's assets. Implementation conceptual."
          }
        ],
        "constraints": [
          {
            "name": "non_negative_valuations",
            "formula": "(pre_money_valuation >= 0) AND (amount_raised >= 0)",
            "error_message": "Valuations and raise amounts cannot be negative."
          }
        ]
      },
      {
        "name": "CapTable",
        "description": "Tracks ownership distribution for each stakeholder (founders, employees, investors) across multiple rounds.",
        "fields": [
          {
            "name": "id",
            "type": "scalar",
            "datatype": "string",
            "primary_key": true
          },
          {
            "name": "startup_id",
            "type": "lookup",
            "target_entity": "Startup",
            "foreign_key": true
          },
          {
            "name": "stakeholder_id",
            "type": "scalar",
            "datatype": "string",
            "description": "Could reference a 'Person' or 'Investor' record, or just store text ID."
          },
          {
            "name": "shares_owned",
            "type": "scalar",
            "datatype": "float"
          },
          {
            "name": "notes",
            "type": "scalar",
            "datatype": "string"
          }
        ],
        "lookups": [],
        "aggregations": [
          {
            "name": "stakeholder_percentage",
            "type": "rollup",
            "formula": "IF( SUM( FOR ALL c in CapTable WHERE c.startup_id=this.startup_id => c.shares_owned ) > 0, ( shares_owned / SUM( FOR ALL c in CapTable WHERE c.startup_id=this.startup_id => c.shares_owned ) )*100, 0 )",
            "description": "Percentage stake in the startup. Summation references all shares for that same startup."
          },
          {
            "name": "total_shares_in_startup",
            "type": "rollup",
            "formula": "SUM( FOR ALL c in CapTable WHERE c.startup_id=this.startup_id => c.shares_owned )",
            "description": "For convenience, how many shares exist in total for the same startup."
          }
        ],
        "lambdas": [
          {
            "name": "adjust_shares_after_round",
            "parameters": [
              "funding_round_id"
            ],
            "formula": "Distribute new_shares_issued from the FundingRound among relevant stakeholders. // Implementation conceptual",
            "description": "Updates or adds entries to reflect newly issued shares from a round."
          }
        ],
        "constraints": []
      },
      {
        "name": "ConvertibleNote",
        "description": "Represents a convertible note or SAFE instrument that can convert into equity upon a future funding round or trigger event.",
        "fields": [
          {
            "name": "id",
            "type": "scalar",
            "datatype": "string",
            "primary_key": true
          },
          {
            "name": "startup_id",
            "type": "lookup",
            "target_entity": "Startup",
            "foreign_key": true
          },
          {
            "name": "principal_amount",
            "type": "scalar",
            "datatype": "float"
          },
          {
            "name": "discount_rate",
            "type": "scalar",
            "datatype": "float",
            "description": "E.g. 20% discount on next round’s price."
          },
          {
            "name": "valuation_cap",
            "type": "scalar",
            "datatype": "float",
            "description": "If next round’s valuation is too high, the note uses this as a max. Null if none."
          },
          {
            "name": "conversion_trigger_round",
            "type": "scalar",
            "datatype": "string",
            "description": "E.g. 'Series A'. If no round name, triggers upon any equity financing over a threshold."
          },
          {
            "name": "notes",
            "type": "scalar",
            "datatype": "string"
          }
        ],
        "lookups": [],
        "aggregations": [
          {
            "name": "implied_equity_shares",
            "type": "rollup",
            "formula": "ComputeConvertibleShares(principal_amount, discount_rate, valuation_cap, NextFundingRoundPreMoneyValuation, NextFundingRoundPricePerShare)",
            "description": "When triggered, how many shares does this note convert into? Implementation conceptual, referencing next round aggregator fields."
          },
          {
            "name": "convertible_ownership_percent",
            "type": "rollup",
            "formula": "IF(implied_equity_shares>0, (implied_equity_shares / (CapTable.total_shares_in_startup + implied_equity_shares))*100, 0)",
            "description": "Approx percent after conversion if the note is triggered now."
          }
        ],
        "lambdas": [
          {
            "name": "trigger_conversion",
            "parameters": [
              "funding_round_id"
            ],
            "formula": "shares = implied_equity_shares; Add to CapTable with stakeholder=holder_of_note. // conceptual",
            "description": "Upon next round or condition, finalize the note’s conversion into equity. Implementation conceptual."
          }
        ],
        "constraints": [
          {
            "name": "non_negative_principal",
            "formula": "principal_amount >= 0",
            "error_message": "Convertible note principal cannot be negative."
          },
          {
            "name": "valid_discount",
            "formula": "(discount_rate >= 0) AND (discount_rate <= 100)",
            "error_message": "Discount rate must be between 0% and 100% (toy assumption)."
          }
        ]
      }
    ]
  },
  "data": {
    "Startup": [
      {
        "id": "startup_greenbot",
        "company_id": "company_xyz",
        "founding_date": "2023-05-15T00:00:00Z",
        "primary_focus": "SaaS for robotics analytics",
        "notes": "Spun out from local university lab"
      }
    ],
    "FundingRound": [
      {
        "id": "rnd_greenbot_seed",
        "startup_id": "startup_greenbot",
        "round_name": "Seed",
        "pre_money_valuation": 2000000,
        "amount_raised": 500000,
        "new_shares_issued": 100000,
        "notes": "Initial seed to build MVP"
      }
    ],
    "CapTable": [
      {
        "id": "ct_founder1",
        "startup_id": "startup_greenbot",
        "stakeholder_id": "founder_alice",
        "shares_owned": 300000,
        "notes": "Founder Alice's initial stake"
      },
      {
        "id": "ct_founder2",
        "startup_id": "startup_greenbot",
        "stakeholder_id": "founder_bob",
        "shares_owned": 200000,
        "notes": "Founder Bob's stake"
      }
    ],
    "ConvertibleNote": [
      {
        "id": "note_seed_safe",
        "startup_id": "startup_greenbot",
        "principal_amount": 100000,
        "discount_rate": 20,
        "valuation_cap": 3000000,
        "conversion_trigger_round": "Series A",
        "notes": "Simple SAFE note with discount and valuation cap"
      }
    ]
  }
},
        "root-meta-model": {
  "title": "The Conceptual Model Completeness Conjecture (CMCC)",
  "subtitle": "A Universal Declarative Computational Framework",
  "authors": [
    {
      "name": "EJ Alexandra",
      "contact": "start@anabstractlevel.com",
      "affiliations": [
        "SSoT.me",
        "EffortlessAPI.com"
      ]
    }
  ],
  "date": "January 2025",
  "abstract": "The Conceptual Model Completeness Conjecture (CMCC) posits that the declarative semantics of any conceptual model can be captured using five fundamental primitives—Schema (S), Data (D), Lookups (L), Aggregations (A), and Lambda Calculated Fields (F)—within an Snapshot-Consistent environment. Demonstrating Turing-completeness and aligning with Wolfram’s multiway systems, CMCC provides a universal substrate for modeling domains ranging from physics and biology to business rules and beyond. This paper formalizes CMCC’s theoretical foundations, presents diverse cross-domain examples, and outlines future directions for building a unified computational framework.",
  "executive_summary": {
    "key_points": [
      "CMCC proposes that five primitives (S, D, L, A, F) suffice to model all computable domain rules.",
      "It achieves Turing-completeness by mapping to Lambda Calculus and Rule 110.",
      "Aligns structurally with Wolfram’s multiway systems (the Ruliad).",
      "Demonstrates broad applicability in Physics, Chemistry, Biology, Math, etc.",
      "A purely declarative approach: 'what' is separate from 'how' (the runtime)."
    ],
    "implications": [
      "Potential unification of domain modeling under a single declarative rulebook.",
      "Scalable approach to cross-domain data management and knowledge representation.",
      "Opens possibilities for AI, simulation, and multiway branching analyses."
    ],
    "narrative": {
      "sections": [
        {
          "title": "Executive Summary",
          "content": [
            "In many domains, describing “what” we want—a mathematical theorem, a business rule, a policy—involves flattening concepts into the syntax of English or code. While convenient for initial discussion, this syntax-locked approach forces us to repeatedly translate ideas between human language and machine processes. As complexity grows, these translations invite drift, ambiguity, and inefficiency."
          ]
        },
        {
          "title": "Starting with an English Theorem",
          "content": [
            "Consider a simple example: the rules that define a “triangle.” In English, we might say:",
            "A triangle is a closed shape with exactly three edges; its internal angles sum to 180°.",
            "This is serviceable for teaching geometry, but it’s not inherently machine-actionable. If someone doesn’t speak English—or if we want to automate checks for “triangleness”—we must rewrite these rules in each environment (programming languages, software specifications, test scripts, etc.). The overhead compounds quickly."
          ]
        },
        {
          "title": "Describing Triangleness in Airtable",
          "content": [
            "In contrast, we can directly capture the rules of geometry in a structural model within a tool like Airtable (or any Snapshot-Consistent environment with fields, lookups, rollups, and formulas). Instead of restating the concept in English each time, we:",
            "• Create tables for Edges and Shapes.",
            "• Use Lookups to link three edges to a shape.",
            "• Add Aggregations to sum angles or count edges.",
            "• Define Formulas to verify that exactly three edges exist, and that the total internal angle equals 180°.",
            "In this configuration, the entire notion of “triangleness” exists as data and relationships, not locked into a single linguistic syntax. Anyone—regardless of spoken language—can inspect or extend the model to handle right triangles, acute triangles, or more advanced geometric constructions. The system remains accessible, self-describing, and effortlessly scalable."
          ]
        },
        {
          "title": "From Triangleness to CMCC",
          "content": [
            "This leads to the Complete Model of Conceptual Completeness (CMCC) theorem: it posits that any conceptual rule (including the rules for “triangleness”) can be encoded using five core primitives—(S, D, L, A, F)—in an Snapshot-Consistent datastore. In essence:",
            "• Schema for defining categories of things,",
            "• Data rows populating those categories,",
            "• Lookups that link records into relationships,",
            "• Aggregations that summarize or roll up data, and",
            "• Formulas for declarative calculations or constraints.",
            "The rulebook (the “what” of a concept) is stored unambiguously in these five primitives, separate from the “how” of any given runtime engine. Because it is a universal structural approach—not tied to a single programming language or specialized DSL—CMCC becomes a syntax-free mirror of the underlying concept. It applies equally to geometry, biology, legal rules, quantum theories, or inventory systems. In short, if a rule can be stated in any imperative language (or in English), it can be modeled structurally under CMCC without loss of fidelity."
          ]
        },
        {
          "title": "Why This Matters",
          "content": [
            "By decoupling the “what” from specific syntax, teams eliminate the repeated translation tasks that plague large projects. Modeling “triangleness” is trivial in Airtable; modeling advanced governance or physics follows the same structural pattern. CMCC solidifies the principle that once we master a small example (like a triangle), we unlock the ability to describe any computable concept. This puts an end to the question, “But will it work for my domain?”: the moment we acknowledge that geometry itself can be captured in a purely structural format, all similarly computable rules become fair game.",
            "In sum, we move from a short English description of a concept, to a self-describing Airtable model, culminating in the CMCC theorem that guarantees we can handle any conceptual domain the same way. This progression ensures that readers—technical or otherwise—understand why syntax-free, declarative modeling is both feasible and transformative. Once you see it work with triangles, you can’t unsee its potential everywhere else."
          ]
        }
      ]
    },
    "addressing_concerns_preemptively": {
      "what_not_how": "It's just a list of statements about WHAT is true at any given moment in time.  If there are a list of 100 true statements, and you add another statement - you will either now have 101 true statements, or the inferences of 1 or more of the previous statements will conflict, pointing to a problem with the conceptual model, rather than the description.  By just listing true things about WHAT is needed, it leaves the question of HOW to make that true up to the runtime engine.",
      "time": "Time is just another dimension.",
      "rulebook_not_the_runtime": "Like a blueprint, or sheet music, the CMCC model is just the rulebook, not the runtime engine.  The runtime engine could be an existing digital twin of some reality that is simply Fed by the CMCC.  In other words, the CMCC model can represent WHAT needs to happen at virtually any level of desired functionality - as a result it can export DSLs, RDF, OWL, Sparql, GraphQL, etc. making the CMCC model a superset of legacy, language based, syntax-locked formats.",
      "scaleability_performance": "As just the rulebook, the implementation can be assembler code written by magical mice in the night if that's the best solution.  But whatever they produce had better pass **all** of the tests derived directly from the CMCC model itself.  As long as it does WHAT it is meant to, how it does it is up to the runtime engine.  If that digital twin involves petabytes of raw data, coming in a gb per second - that's going to be a monumental engineering task.  But whatever the solution at runtime, it just needs to do WHAT is required.",
      "reality_is_the_best_runtime_engine": "Ultimately, for physics for example, reality is the runtime engine.  This just provides the model to understand WHAT is happening at runtime.  Using Airtable to define business rules works for all but the most extreme concepts, but all it defines is exactly WHAT needs to be done.  HOW Airtable works might as well be magic.  I have absolutely no idea HOW it works, but that doesn't really matter since that's not its role in this process.  Its role is to define a high-fidelity, hyper-dimensional model that DEFINES Truth.  On the other end of the spectrum we have Reality Itself, which might as well also be magical, at least at the quantum fringes.  Here again—our models don't describe HOW the wave collapses, but WHAT a wave collapse is.  Or WHAT a Customer is, and WHAT makes them a VIP customer—not how we compute if they are a VIP in some AWS server.  VIP customers are still going to be anyone with over $1000 of sales—that is the part that's invariant.",
      "bright_red_lines": "Separating out WHAT is true from HOW to make it true at runtime draws a BRIGHT RED LINE about what KIND of change is being made.  Additionally, the types of changes that can be made to the model are also separated into two radically different types by another BRIGHT RED LINE.  The first type of change is one where the domain is simply being extended.  In these cases, the CI/CD pipeline will pick up those changes and they will simply be deployed to the dev/test environment.  By contrast, if the domain itself is changed, because changing the schema or rules for a domain is a fundamentally different CATEGORY of change than simply adding another widget to the tens of thousands of widgets that are already in the datastore."
    }
  },
  "CMCC_ToEMM_Domain_List": [
    {
      "id": "CMCC_ToEMM_Math",
      "fullname": "Mathematics ToE Meta-Model",
      "name": "Mathematics CMCC Meta-Model",
      "description": "A structured model covering foundational mathematics, including sets, functions, proofs, structures, and category theory.",
      "nickname": "math"
    },
    {
      "id": "CMCC_ToEMM_Physics",
      "fullname": "Physics ToE Meta-Model",
      "name": "Physics ToE Meta-Model",
      "description": "A unified model for physics, including classical mechanics, quantum mechanics, gauge fields, wavefunctions, relativity, and black hole dynamics.",
      "nickname": "physics"
    },
    {
      "id": "CMCC_ToEMM_Chemistry",
      "fullname": "Chemistry ToE Meta-Model",
      "name": "Chemistry ToE Meta-Model",
      "description": "Extends the Physics TOE with atomic structures, molecular interactions, bonds, and chemical reactions.",
      "nickname": "chemistry"
    },
    {
      "id": "CMCC_ToEMM_Biology",
      "fullname": "Biology ToE Meta-Model",
      "name": "Biology ToE Meta-Model",
      "description": "Bridges Chemistry and Physics TOEs to model biological systems, including genes, proteins, metabolism, and cellular structures.",
      "nickname": "biology"
    },
    {
      "id": "CMCC_ToEMM_AI",
      "fullname": "Artificial Intelligence ToE Meta-Model",
      "name": "Artificial Intelligence ToE Meta-Model",
      "description": "Encapsulates machine learning, neural networks, training datasets, reinforcement learning, and inference mechanisms.",
      "nickname": "ai"
    },
    {
      "id": "CMCC_ToEMM_Economics",
      "fullname": "Economics ToE Meta-Model",
      "name": "Economics ToE Meta-Model",
      "description": "A computational model for economic agents, markets, transactions, and supply-demand constraints.",
      "nickname": "economics"
    },
    {
      "id": "CMCC_ToEMM_Finance",
      "fullname": "Finance ToE Meta-Model",
      "name": "Finance ToE Meta-Model",
      "description": "A computational model for financial assets, corporate finance, risk management, capital structure, etc.",
      "nickname": "finance"
    },
    {
      "id": "CMCC_ToEMM_MergersAndAcquisitions",
      "fullname": "Mergers & Acquisitions ToE Meta-Model",
      "name": "Mergers & Acquisitions ToE Meta-Model",
      "description": "A computational model for M&A deals, synergy analysis, due diligence, purchase agreements, etc.",
      "nickname": "mna"
    },
    {
      "id": "CMCC_ToEMM_VentureCapital",
      "fullname": "Venture Capital ToE Meta-Model",
      "name": "Venture Capital ToE Meta-Model",
      "description": "A computational model for startup funding, term sheets, cap tables, equity splits, etc.",
      "nickname": "venturecapital"
    },
    {
      "id": "CMCC_ToEMM_DevOps",
      "fullname": "DevOps ToE Meta-Model",
      "name": "DevOps ToE Meta-Model",
      "description": "A computational model for development operations, CI/CD pipelines, resource usage, etc.",
      "nickname": "devops"
    },
    {
      "id": "CMCC_ToEMM_Astronomy",
      "fullname": "Astronomy ToE Meta-Model",
      "name": "Astronomy ToE Meta-Model",
      "description": "An extension of the Physics TOE to model celestial bodies, star systems, orbital dynamics, and large-scale cosmic structures.",
      "nickname": "astronomy"
    },
    {
      "id": "CMCC_ToEMM_Geology",
      "fullname": "Geology oE Meta-Model",
      "name": "Geology",
      "description": "A model integrating physics and chemistry to represent minerals, rock formations, and tectonic processes.",
      "nickname": "geology"
    },
    {
      "id": "CMCC_ToEMM_Medicine",
      "fullname": "Medicine and Healthcare ToE Meta-Model",
      "name": "Medicine & Healthcare ToE Meta-Model",
      "description": "A unified model capturing foundational aspects of medicine and healthcare, including patient records, clinical trial data, treatment plans, and healthcare analytics.",
      "nickname": "medicine"
    },
    {
      "id": "CMCC_ToEMM_Legal",
      "fullname": "Legal Systems & Compliance ToE Meta-Model",
      "name": "Legal Systems & Compliance ToE Meta-Model",
      "description": "A unified model for legal systems, contracts, statutory frameworks, and regulatory compliance.",
      "nickname": "legal"
    },
    {
      "id": "CMCC_ToEMM_Climate",
      "fullname": "Climate Science and Environmental Modeling ToE Meta-Model",
      "name": "Climate Science ToE Meta-Model",
      "description": "A unified model for climate science and environmental modeling, capturing climate variables, ecosystems, pollution sources, and environmental data with built-in predictive and forecast capabilities.",
      "nickname": "climate"
    },
    {
      "id": "CMCC_ToEMM_Cybersecurity",
      "fullname": "Cybersecurity ToE Meta-Model",
      "name": "Cybersecurity ToE Meta-Model",
      "description": "A unified model for cybersecurity covering threat models, vulnerabilities, IT asset mappings, incident logs, and security audits.",
      "nickname": "cybersecurity"
    },
    {
      "id": "CMCC_ToEMM_Sociology",
      "fullname": "Sociology and Anthropology ToE Meta-Model",
      "name": "Sociology & Anthropology ToE Meta-Model",
      "description": "A structured model capturing social structures, cultural norms, and interaction networks using survey data, demographic records, and social network relationships.",
      "nickname": "sociology"
    }
  ]
}

}