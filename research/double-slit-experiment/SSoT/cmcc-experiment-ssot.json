[
    {
      "name": "Grid",
      "fields": [
        { "name": "nx", "type": "number", "description": "Grid points in x-direction" },
        { "name": "ny", "type": "number", "description": "Grid points in y-direction" },
        { "name": "Lx", "description": "Physical domain size in x" },
        { "name": "Ly", "description": "Physical domain size in y" },
        {
          "name": "dx",
          "type": "calculated",
          "formula": "DIVIDE(Lx,nx)"
        },
        {
          "name": "dy",
          "type": "calculated",
          "formula": "DIVIDE(Ly,ny)"
        },
        {
          "name": "barrier_y_phys",
          "description": "Physical y-coordinate of barrier"
        },
        {
          "name": "detector_y_phys",
          "description": "Physical y-coordinate of detector"
        },
        {
          "name": "barrier_row",
          "type": "calculated",
          "formula": "FLOOR(DIVIDE(ADD(barrier_y_phys,DIVIDE(Ly,2)),dy))"
        },
        {
          "name": "detector_row",
          "type": "calculated",
          "formula": "FLOOR(DIVIDE(ADD(detector_y_phys,DIVIDE(Ly,2)),dy))"
        },
        {
          "name": "slit_width",
          "description": "Width of each slit (grid points)"
        },
        {
          "name": "slit_spacing",
          "description": "Spacing between slits (grid points)"
        },
        {
          "name": "center_x",
          "type": "calculated",
          "formula": "FLOOR(DIVIDE(nx,2))"
        },
        {
          "name": "slit1_xstart",
          "type": "calculated",
          "formula": "SUBTRACT(center_x,FLOOR(DIVIDE(slit_spacing,2)))"
        },
        {
          "name": "slit1_xend",
          "type": "calculated",
          "formula": "ADD(slit1_xstart,slit_width)"
        },
        {
          "name": "slit2_xstart",
          "type": "calculated",
          "formula": "ADD(center_x,FLOOR(DIVIDE(slit_spacing,2)))"
        },
        {
          "name": "slit2_xend",
          "type": "calculated",
          "formula": "ADD(slit2_xstart,slit_width)"
        }
      ]
    },
    {
      "name": "CoinOperator",
      "fields": [
        {
          "name": "Matrix",
          "type": "tensor",
          "tensor_shape": "(8,8)",
          "description": "8x8 unitary matrix"
        },
        {
          "name": "seed",
          "description": "Random seed for reproducibility"
        },
        {
          "name": "UnitarityCheck",
          "type": "calculated",
          "formula": "EQUAL(MULTIPLY(Matrix,CONJUGATE_TRANSPOSE(Matrix)),IDENTITY(8))"
        }
      ]
    },
    {
      "name": "WavefunctionInitial",
      "fields": [
        { 
          "name": "psi_init", 
          "type": "tensor", 
          "tensor_shape": "(ny,nx,8)",
          "description": "Initial wavefunction (time=0)"
        },
        {
          "name": "y_source_center",
          "description": "Location of the wave packet source"
        },
        {
          "name": "y_source_sigma",
          "description": "Width of the Gaussian in y"
        }
      ]
    },
    {
      "name": "WavefunctionStep",
      "fields": [
        {
          "name": "coin_applied_psi",
          "type": "calculated",
          "tensor_shape": "(ny,nx,8)",
          "formula": "MATMUL(WavefunctionStep.psi_in, TRANSPOSE(CoinOperator.Matrix))",
          "description": "Coin step: applies coin operator to each spin component"
        },
        {
          "name": "shifted_psi",
          "type": "calculated",
          "tensor_shape": "(ny,nx,8)",
          "formula": "SHIFT(coin_applied_psi, offsets=[(-1,0),(+1,0),(0,-1),(0,+1),(-1,-1),(-1,+1),(+1,-1),(+1,+1)])",
          "description": "Shift step: each direction is rolled along x or y"
        },
        {
          "name": "barrier_applied_psi",
          "type": "calculated",
          "tensor_shape": "(ny,nx,8)",
          "formula": "APPLY_BARRIER(shifted_psi, Grid.barrier_row, Grid.slit1_xstart, Grid.slit1_xend, Grid.slit2_xstart, Grid.slit2_xend)",
          "description": "Zero out barrier row except the slit columns"
        },
        {
          "name": "psi_out",
          "type": "calculated",
          "tensor_shape": "(ny,nx,8)",
          "formula": "SELECT(measure_barrier, COLLAPSE_BARRIER(barrier_applied_psi), barrier_applied_psi)",
          "description": "If measuring barrier => collapse, else pass through"
        },
        {
          "name": "psi_in",
          "type": "tensor",
          "tensor_shape": "(ny,nx,8)",
          "description": "Input wavefunction for this step"
        },
        {
          "name": "measure_barrier",
          "description": "Boolean: do we measure/collapse the barrier on this step?"
        }
      ]
    },
    {
      "name": "WavefunctionProperties",
      "fields": [
        {
          "name": "total_norm",
          "type": "calculated",
          "formula": "SUM(ABS(WavefunctionStep.psi_out)^2)",
          "description": "Total probability norm at the end of a step"
        },
        {
          "name": "detector_row_amp",
          "type": "calculated",
          "formula": "SLICE(WavefunctionStep.psi_out, axis=0, index=Grid.detector_row)",
          "description": "Extract the wavefunction row at the detector"
        },
        {
          "name": "detector_intensity",
          "type": "calculated",
          "formula": "SUM(ABS(detector_row_amp)^2, axis=-1)",
          "description": "Sum over spin directions => shape=(nx,)"
        }
      ]
    },
    {
      "name": "QWalkRunner",
      "fields": [
        {
          "name": "steps_to_barrier",
          "description": "Number of steps before measuring or ignoring barrier"
        },
        {
          "name": "steps_after_barrier",
          "description": "Number of steps after barrier measurement"
        },
        {
          "name": "collapse_barrier",
          "description": "Boolean: if true, measure/collapse at barrier_row"
        },
        {
          "name": "final_wavefunction",
          "type": "calculated",
          "formula": "EVOLVE(WavefunctionInitial.psi_init, steps_to_barrier, steps_after_barrier, collapse_barrier)",
          "description": "Resulting wavefunction after all steps."
        }
      ]
    }
  ]
  