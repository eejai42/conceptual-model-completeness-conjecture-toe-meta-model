{
    "id": "CMCC_ToEMM_Baseball",
    "meta-model": {
      "name": "Baseball ToE Meta Model",
      "description": "A unified meta-model capturing the entire domain of baseball—teams, players, games, innings, stats, and rules—within a single Snapshot-Consistent, declarative structure. All domain logic—like scoring, outs, pitch outcomes, lineups, or statistics—are expressed using lookups, aggregations, lambdas, and constraints.",
      "version": "v1.1",
      "nickname": "baseball",
      "meta": {
        "title": "Baseball ToE Meta-Model",
        "subtitle": "A Unified Declarative Framework for the Sport's Structures and Rules",
        "authors": [
          {
            "name": "EJ Alexandra",
            "contact": "start@anabstractlevel.com",
            "affiliations": [
              "SSoT.me",
              "EffortlessAPI.com"
            ]
          }
        ],
        "date": "March 2025",
        "abstract": "The Baseball extension of the CMCC (Conceptual Model Completeness Conjecture) systematically represents baseball’s core objects—Teams, Players, Games, Innings, At-Bats—under a single Snapshot-Consistent schema. Using five foundational primitives (S, D, L, A, F), it encodes rules around scoring, outs, pitching results, roster management, and advanced stats, enabling cross-system synergy and easy maintenance. Everything from ball/strike logic to multi-season aggregated metrics can be modeled and updated as purely declarative data, removing the need for domain-specific baseball DSLs or ad hoc, code-scattered rules.",
        "executive_summary": {
          "key_points": [
            "Models baseball’s entire rule structure—teams, rosters, innings, batting orders, stats—declaratively with aggregator formulas, lambdas, and constraints.",
            "Eliminates the need for dedicated baseball-simulation languages by storing the 'what' (the game logic) as first-class data relationships.",
            "Demonstrates flexibility for advanced sabermetrics: from pitch-level detail to advanced team-level analytics.",
            "Seamlessly integrates with other CMCC domains (e.g., economics or sociology) for cross-domain synergy (financial aspects of baseball, fan demographics, etc.)."
          ],
          "implications": [
            "Provides a universal environment for capturing the rules of baseball—from simple youth-league style to MLB-level detail.",
            "Easily extended or internationalized (e.g., minor league variants, overseas leagues) without rewriting core logic.",
            "Supports advanced analytics and queries—once in the data, any aggregator or custom lambda can examine on-base percentages, fielding metrics, or predicted outcomes."
          ],
          "narrative": [
            {
              "title": "CMCC Baseball Extension",
              "content": [
                "Baseball is a famously data-heavy sport, from the rules around balls and strikes to the infinite array of metrics (batting average, ERA, WAR, etc.). Historically, baseball logic has been scattered through textual rulebooks, custom-coded simulators, or ad hoc spreadsheets. Each approach repeats or re-implements the same concepts—teams, innings, outs, runs, at-bats—in its own way.",
                "By contrast, the CMCC Baseball Model encodes all these domain concepts in a purely declarative fashion, capturing every rule from the simplest (3 strikes = 1 out) to the more subtle (infield fly, balk, defensive shifts, advanced sabermetrics). It becomes the single source of truth for all baseball logic—human-readable, machine-readable, and universally translatable. Whether you’re building a fantasy league platform, a simulation game, or advanced baseball analytics, the same structural definitions serve as the foundation, letting you query, transform, or expand the baseball domain without rewriting business logic in code."
              ]
            }
          ]
        },
        "schema": {
          "entities": [
            {
              "name": "League",
              "description": "Represents an organized group of baseball teams playing under the same rule set. Could be MLB, minor leagues, or an amateur league.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique identifier for the league."
                },
                {
                  "name": "leagueName",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "The official or common name of the league."
                }
              ],
              "lookups": [
                {
                  "name": "teams",
                  "target_entity": "Team",
                  "type": "one_to_many",
                  "join_condition": "Team.league_id = this.id",
                  "description": "Collection of Teams belonging to this league."
                }
              ],
              "aggregations": [
                {
                  "name": "teamCount",
                  "type": "rollup",
                  "formula": "COUNT(teams)",
                  "description": "Number of teams in this league."
                },
                {
                  "name": "totalGamesPlayed",
                  "type": "rollup",
                  "description": "Sum of all Games completed by all Teams in the league. Implementation conceptual, scanning each team's 'gamesPlayed'.",
                  "formula": "SUM(teams.gamesPlayed)"
                },
                {
                  "name": "bestTeam",
                  "type": "rollup",
                  "description": "(NEW #1) The team with the highest win percentage in this league.",
                  "formula": "MAXBY(teams, t => t.winPercentage)" 
                },
                {
                  "name": "worstTeam",
                  "type": "rollup",
                  "description": "(NEW #2) The team with the lowest win percentage in this league.",
                  "formula": "MINBY(teams, t => t.winPercentage)"
                },
                {
                  "name": "averageTeamERA",
                  "type": "rollup",
                  "description": "(NEW #3) The average ERA across all teams in this league. Implementation conceptual, requires summing or averaging pitchers’ ERA or team-level ERA.",
                  "formula": "AVG(teams -> eachTeamERA)" 
                },
                {
                  "name": "totalLeagueHomeRuns",
                  "type": "rollup",
                  "description": "(NEW #4) The sum of all home runs hit by players on all teams in this league.",
                  "formula": "SUM(teams.roster -> sum of careerHomeRuns )"
                },
                {
                  "name": "totalLeagueStolenBases",
                  "type": "rollup",
                  "description": "(NEW #5) The sum of all stolen bases by players on all teams in this league.",
                  "formula": "SUM(teams.roster -> sum of careerStolenBases )"
                }
              ],
              "lambdas": [
                {
                  "name": "scheduleMatchups",
                  "parameters": [],
                  "description": "Generates a default schedule for all teams in the league (round-robin, balanced, or MLB-style). Implementation conceptual.",
                  "formula": "CreateScheduledGames(teams)"
                }
              ],
              "constraints": []
            },
            {
              "name": "Team",
              "description": "A baseball team. Belongs to one League, has a roster of Players, and competes in Games.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique identifier for the team."
                },
                {
                  "name": "teamName",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "Name or nickname of the team."
                },
                {
                  "name": "league_id",
                  "type": "lookup",
                  "target_entity": "League",
                  "foreign_key": true,
                  "description": "Indicates which League this team belongs to."
                }
              ],
              "lookups": [
                {
                  "name": "roster",
                  "target_entity": "Player",
                  "type": "one_to_many",
                  "join_condition": "Player.team_id = this.id",
                  "description": "All players currently on the team."
                }
              ],
              "aggregations": [
                {
                  "name": "rosterSize",
                  "type": "rollup",
                  "formula": "COUNT(roster)",
                  "description": "Number of players on the team's active roster."
                },
                {
                  "name": "gamesPlayed",
                  "type": "rollup",
                  "description": "Number of Games in which this team has participated. Implementation conceptual.",
                  "formula": "COUNT(Game where (homeTeamId=this.id OR awayTeamId=this.id))"
                },
                {
                  "name": "wins",
                  "type": "rollup",
                  "description": "Count of Games this team has won.",
                  "formula": "COUNT(Game where (winnerId=this.id))"
                },
                {
                  "name": "losses",
                  "type": "rollup",
                  "description": "Count of Games this team has lost.",
                  "formula": "COUNT(Game where (loserId=this.id))"
                },
                {
                  "name": "winPercentage",
                  "type": "rollup",
                  "description": "wins / (wins + losses), if any games played. Null otherwise.",
                  "formula": "IF (gamesPlayed>0) THEN (wins / gamesPlayed) ELSE null"
                },
                {
                  "name": "averageTeamBattingAverage",
                  "type": "rollup",
                  "description": "(NEW #6) The average batting average among all players on the roster.",
                  "formula": "AVG(roster.careerBattingAverage)"
                },
                {
                  "name": "totalTeamRuns",
                  "type": "rollup",
                  "description": "(NEW #7) Total runs scored by this team (across all games). Implementation conceptual.",
                  "formula": "SUM(GameInnings where offense=this.id => runsScored )"
                },
                {
                  "name": "totalTeamHomeRuns",
                  "type": "rollup",
                  "description": "(NEW #8) Sum of home runs hit by all players on this team.",
                  "formula": "SUM(roster -> careerHomeRuns )"
                },
                {
                  "name": "totalTeamStolenBases",
                  "type": "rollup",
                  "description": "(NEW #9) Sum of stolen bases by all players on this team.",
                  "formula": "SUM(roster -> careerStolenBases )"
                },
                {
                  "name": "averageFieldingPercentage",
                  "type": "rollup",
                  "description": "(NEW #10) The team’s overall fielding percentage, averaging all players’ fielding percentages who actively field.",
                  "formula": "AVG(roster -> careerFieldingPercentage )"
                },
                {
                  "name": "winningPercentageInStadium",
                  "type": "rollup",
                  "description": "(NEW #25) The team’s historical winning percentage in a given stadium (home or away). Implementation conceptual—would require stadium-based filter on Games.",
                  "formula": "WIN_PCT_BY_STADIUM_FUNCTION(this.id)"
                }
              ],
              "lambdas": [
                {
                  "name": "addPlayerToRoster",
                  "parameters": [
                    "player_id"
                  ],
                  "description": "Adds a Player to this team's roster. Implementation conceptual.",
                  "formula": "Set Player.team_id = this.id"
                },
                {
                  "name": "removePlayerFromRoster",
                  "parameters": [
                    "player_id"
                  ],
                  "description": "Removes a Player from this team's roster if present. Implementation conceptual.",
                  "formula": "Set Player.team_id = null"
                }
              ],
              "constraints": []
            },
            {
              "name": "Player",
              "description": "An individual who participates in baseball games, either as a position player, pitcher, or both.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique identifier for the player."
                },
                {
                  "name": "fullName",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "Player's full name."
                },
                {
                  "name": "battingHand",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "Indicates 'L', 'R', or 'S' (switch)."
                },
                {
                  "name": "throwingHand",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "Indicates 'L' or 'R'."
                },
                {
                  "name": "team_id",
                  "type": "lookup",
                  "target_entity": "Team",
                  "foreign_key": true,
                  "description": "Which Team this player is currently on, if any."
                }
              ],
              "lookups": [
                {
                  "name": "defensivePositions",
                  "target_entity": "DefensivePosition",
                  "type": "many_to_many",
                  "description": "All possible defensive positions the player can handle. Implementation: PlayerPosition join table or similar."
                }
              ],
              "aggregations": [
                {
                  "name": "careerAtBats",
                  "type": "rollup",
                  "formula": "COUNT( AtBat where (batterId=this.id) )",
                  "description": "How many official at-bats the player has had across all games."
                },
                {
                  "name": "careerHits",
                  "type": "rollup",
                  "description": "How many hits the player has recorded across all at-bats.",
                  "formula": "COUNT( AtBat where (batterId=this.id AND result in ['SINGLE','DOUBLE','TRIPLE','HOMERUN']) )"
                },
                {
                  "name": "careerBattingAverage",
                  "type": "rollup",
                  "description": "(careerHits / careerAtBats). Null if no at-bats.",
                  "formula": "IF (careerAtBats>0) THEN (careerHits / careerAtBats) ELSE null"
                },
                {
                  "name": "careerPitchCount",
                  "type": "rollup",
                  "description": "Total number of pitches thrown by this player, if a pitcher.",
                  "formula": "COUNT( Pitch where (pitcherId=this.id) )"
                },
                {
                  "name": "careerStrikeoutsPitched",
                  "type": "rollup",
                  "description": "How many strikeouts the player (as pitcher) has recorded.",
                  "formula": "COUNT( AtBat where (pitcherId=this.id AND result='STRIKEOUT') )"
                },
                {
                  "name": "careerInningsPitched",
                  "type": "rollup",
                  "description": "Summation of partial innings if the player is a pitcher. Implementation conceptual.",
                  "formula": "AccumulateInningsFromOuts( sum_of_outs_where_pitcherId=this.id )"
                },
                {
                  "name": "onBasePercentage",
                  "type": "rollup",
                  "description": "(NEW #11) Calculated as (H + BB + HBP) / (AB + BB + HBP + SF). Implementation conceptual; requires deeper data of walks (BB), HBP, sac flies (SF).",
                  "formula": "IF (plateAppearances>0) THEN ((careerHits + careerWalks + careerHitByPitch) / (careerAtBats + careerWalks + careerHitByPitch + careerSacFlies)) ELSE null"
                },
                {
                  "name": "sluggingPercentage",
                  "type": "rollup",
                  "description": "(NEW #12) Total bases / at-bats. Implementation conceptual if we store how many doubles, triples, HR, etc. the player has.",
                  "formula": "IF (careerAtBats>0) THEN (sumOfTotalBases / careerAtBats) ELSE null"
                },
                {
                  "name": "ops",
                  "type": "rollup",
                  "description": "(NEW #13) On-base plus slugging. onBasePercentage + sluggingPercentage.",
                  "formula": "onBasePercentage + sluggingPercentage"
                },
                {
                  "name": "stolenBasePercentage",
                  "type": "rollup",
                  "description": "(NEW #14) ratio = stolenBases / (stolenBases + timesCaught). Implementation conceptual.",
                  "formula": "IF ((careerStolenBases + careerCaughtStealing) > 0) THEN (careerStolenBases / (careerStolenBases + careerCaughtStealing)) ELSE null"
                },
                {
                  "name": "isTwoWayPlayer",
                  "type": "rollup",
                  "description": "(NEW #15) Boolean indicating if this player has pitched significantly and also batted as a non-pitcher. Implementation conceptual.",
                  "formula": "IF (careerInningsPitched > 0 AND careerAtBats > 0) THEN true ELSE false"
                }
              ],
              "lambdas": [
                {
                  "name": "adjustBattingHand",
                  "parameters": [
                    "newHand"
                  ],
                  "description": "Updates the player's batting hand to newHand. Implementation conceptual.",
                  "formula": "Set this.battingHand = newHand"
                }
              ],
              "constraints": []
            },
            {
              "name": "DefensivePosition",
              "description": "A position on the baseball field, e.g. pitcher (1), catcher (2), shortstop (6), etc.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique ID for the position (often '1','2','3','4','5','6','7','8','9' or 'DH')."
                },
                {
                  "name": "positionName",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "Descriptive name (Pitcher, Catcher, Shortstop, etc.)."
                }
              ],
              "lookups": [],
              "aggregations": [],
              "lambdas": [],
              "constraints": []
            },
            {
              "name": "Game",
              "description": "Represents a single baseball game between two Teams, split into innings (top & bottom).",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique identifier for the game."
                },
                {
                  "name": "homeTeamId",
                  "type": "lookup",
                  "target_entity": "Team",
                  "foreign_key": false,
                  "description": "Which team is playing at home."
                },
                {
                  "name": "awayTeamId",
                  "type": "lookup",
                  "target_entity": "Team",
                  "foreign_key": false,
                  "description": "Which team is visiting."
                },
                {
                  "name": "status",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "Game status: e.g. 'SCHEDULED','IN_PROGRESS','FINAL'."
                }
              ],
              "lookups": [
                {
                  "name": "innings",
                  "target_entity": "Inning",
                  "type": "one_to_many",
                  "join_condition": "Inning.gameId = this.id",
                  "description": "All Inning records associated with this Game."
                }
              ],
              "aggregations": [
                {
                  "name": "currentInningNumber",
                  "type": "rollup",
                  "description": "Highest inningNumber in innings that have started or are in progress.",
                  "formula": "IF innings != null THEN MAX(innings.inningNumber) ELSE null"
                },
                {
                  "name": "runsHome",
                  "type": "rollup",
                  "description": "Total runs scored by the home team, summing the relevant half-innings if offense=homeTeamId.",
                  "formula": "SUM( InningHalf.runsScored for all bottomHalves with offensiveTeamId=homeTeamId )"
                },
                {
                  "name": "runsAway",
                  "type": "rollup",
                  "description": "Total runs scored by the away team, summing the relevant half-innings if offense=awayTeamId.",
                  "formula": "SUM( InningHalf.runsScored for all topHalves with offensiveTeamId=awayTeamId )"
                },
                {
                  "name": "winnerId",
                  "type": "rollup",
                  "description": "If status='FINAL', determine which team has more runs. Null if tie or incomplete.",
                  "formula": "IF status='FINAL' THEN (IF runsHome>runsAway THEN homeTeamId ELSE IF runsAway>runsHome THEN awayTeamId ELSE null) ELSE null"
                },
                {
                  "name": "loserId",
                  "type": "rollup",
                  "description": "Symmetric aggregator to winnerId; identifies losing team if final and not tied.",
                  "formula": "IF status='FINAL' AND runsHome!=runsAway THEN (IF winnerId=homeTeamId THEN awayTeamId ELSE homeTeamId) ELSE null"
                },
                {
                  "name": "totalPitchesInGame",
                  "type": "rollup",
                  "description": "(NEW #16) Total number of pitches thrown by both sides in this game.",
                  "formula": "COUNT( all Pitches in all AtBats that belong to this game )"
                },
                {
                  "name": "hasWalkOffOpportunity",
                  "type": "rollup",
                  "description": "(NEW #17) True if it's the bottom of the final inning or extras and the home team can win with the current at-bat. Implementation conceptual.",
                  "formula": "CHECK_IF_BOTTOM_INNING_WITH_SCORE_MARGIN(this.id)"
                }
              ],
              "lambdas": [
                {
                  "name": "startGame",
                  "parameters": [],
                  "description": "Sets status='IN_PROGRESS', initializes the first Inning, etc.",
                  "formula": "this.status='IN_PROGRESS'; Create(Inning for inningNumber=1)"
                },
                {
                  "name": "endGame",
                  "parameters": [],
                  "description": "Sets status='FINAL', no further changes allowed to this game record.",
                  "formula": "this.status='FINAL'"
                }
              ],
              "constraints": [
                {
                  "name": "teamMismatch",
                  "formula": "homeTeamId != awayTeamId",
                  "error_message": "Home and away team cannot be the same."
                }
              ]
            },
            {
              "name": "Inning",
              "description": "A single inning in the game, typically has a top and bottom half unless extras are needed.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique ID for this inning record."
                },
                {
                  "name": "gameId",
                  "type": "lookup",
                  "target_entity": "Game",
                  "foreign_key": true,
                  "description": "Which game this inning belongs to."
                },
                {
                  "name": "inningNumber",
                  "type": "scalar",
                  "datatype": "integer",
                  "description": "Which inning number (1..9, or extras)."
                }
              ],
              "lookups": [
                {
                  "name": "top",
                  "target_entity": "InningHalf",
                  "type": "one_to_one",
                  "description": "The top half of this inning, if defined."
                },
                {
                  "name": "bottom",
                  "target_entity": "InningHalf",
                  "type": "one_to_one",
                  "description": "The bottom half of this inning, if defined."
                }
              ],
              "aggregations": [
                {
                  "name": "isComplete",
                  "type": "rollup",
                  "description": "True if top and bottom half are both complete, or if no bottom half needed (walk-off scenario).",
                  "formula": "top.isComplete AND (bottom == null OR bottom.isComplete)"
                }
              ],
              "lambdas": [],
              "constraints": []
            },
            {
              "name": "InningHalf",
              "description": "Represents either top or bottom portion of an inning, with outs, runs, at-bats, etc.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique ID for this half-inning record."
                },
                {
                  "name": "halfType",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "TOP or BOTTOM."
                },
                {
                  "name": "offensiveTeamId",
                  "type": "lookup",
                  "target_entity": "Team",
                  "foreign_key": false,
                  "description": "Which team is batting."
                },
                {
                  "name": "defensiveTeamId",
                  "type": "lookup",
                  "target_entity": "Team",
                  "foreign_key": false,
                  "description": "Which team is in the field."
                },
                {
                  "name": "outs",
                  "type": "scalar",
                  "datatype": "integer",
                  "description": "Number of outs recorded so far (0..3)."
                },
                {
                  "name": "runsScored",
                  "type": "scalar",
                  "datatype": "integer",
                  "description": "Tally of runs scored in this half-inning."
                },
                {
                  "name": "isComplete",
                  "type": "scalar",
                  "datatype": "boolean",
                  "description": "True when 3 outs have been recorded, or the half-inning ended otherwise (walk-off, etc.)."
                }
              ],
              "lookups": [
                {
                  "name": "atBats",
                  "target_entity": "AtBat",
                  "type": "one_to_many",
                  "join_condition": "AtBat.inningHalfId = this.id",
                  "description": "All plate appearances in this half-inning."
                }
              ],
              "aggregations": [
                {
                  "name": "battersFaced",
                  "type": "rollup",
                  "description": "Number of batters who came up to the plate (size of atBats).",
                  "formula": "COUNT(atBats)"
                },
                {
                  "name": "hitsInHalf",
                  "type": "rollup",
                  "description": "How many hits (1B,2B,3B,HR) occurred in this half.",
                  "formula": "COUNT( AtBat where (inningHalfId=this.id AND result in ['SINGLE','DOUBLE','TRIPLE','HOMERUN']) )"
                },
                {
                  "name": "leftOnBase",
                  "type": "rollup",
                  "description": "(NEW #18) How many baserunners remained stranded when the half-inning ended. Implementation conceptual.",
                  "formula": "CALCULATE_STRANDED_RUNNERS(this.id)"
                }
              ],
              "lambdas": [
                {
                  "name": "recordOut",
                  "parameters": [],
                  "description": "Increments 'outs'. If outs==3, set isComplete=true. Implementation conceptual.",
                  "formula": "outs = outs + 1; IF outs>=3 THEN isComplete=true;"
                },
                {
                  "name": "scoreRun",
                  "parameters": [
                    "count"
                  ],
                  "description": "Increments runsScored by 'count'. Implementation conceptual.",
                  "formula": "runsScored = runsScored + count;"
                }
              ],
              "constraints": [
                {
                  "name": "validOutCount",
                  "formula": "outs >= 0 AND outs <= 3",
                  "error_message": "Outs must be between 0 and 3 inclusive."
                }
              ]
            },
            {
              "name": "AtBat",
              "description": "A single plate appearance, from the start of the batter's turn to its final result.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique ID for this at-bat record."
                },
                {
                  "name": "inningHalfId",
                  "type": "lookup",
                  "target_entity": "InningHalf",
                  "foreign_key": true,
                  "description": "Which half-inning this at-bat belongs to."
                },
                {
                  "name": "batterId",
                  "type": "lookup",
                  "target_entity": "Player",
                  "foreign_key": false,
                  "description": "Player who is batting."
                },
                {
                  "name": "pitcherId",
                  "type": "lookup",
                  "target_entity": "Player",
                  "foreign_key": false,
                  "description": "Player (pitcher) on defense facing the batter."
                },
                {
                  "name": "result",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "Outcome: e.g. 'SINGLE','DOUBLE','TRIPLE','HOMERUN','WALK','STRIKEOUT','GROUNDOUT','FLYOUT','HIT_BY_PITCH', etc."
                },
                {
                  "name": "rbi",
                  "type": "scalar",
                  "datatype": "integer",
                  "description": "Number of runs batted in on this at-bat (0..4)."
                }
              ],
              "lookups": [
                {
                  "name": "pitches",
                  "target_entity": "Pitch",
                  "type": "one_to_many",
                  "join_condition": "Pitch.atBatId = this.id",
                  "description": "All Pitch records thrown in this at-bat."
                }
              ],
              "aggregations": [
                {
                  "name": "pitchCountInAtBat",
                  "type": "rollup",
                  "description": "Number of pitches thrown in this at-bat.",
                  "formula": "COUNT(pitches)"
                },
                {
                  "name": "fouls",
                  "type": "rollup",
                  "description": "Number of foul pitches among 'pitches'.",
                  "formula": "COUNT( Pitch where (atBatId=this.id AND pitchResult='FOUL') )"
                },
                {
                  "name": "expectedBattingAverage",
                  "type": "rollup",
                  "description": "(NEW #19) A sabermetric measure (xBA) based on exit velocity, launch angle, etc. Implementation conceptual.",
                  "formula": "SABERMETRIC_xBA_FORMULA(this.id)"
                }
              ],
              "lambdas": [
                {
                  "name": "addPitch",
                  "parameters": [
                    "pitchData"
                  ],
                  "description": "Appends a new Pitch record referencing this at-bat. Implementation conceptual.",
                  "formula": "INSERT Pitch { atBatId: this.id, ...pitchData }"
                },
                {
                  "name": "finalizeAtBat",
                  "parameters": [],
                  "description": "Locks in the final result and updates inningHalf outs/runs as needed. Implementation conceptual.",
                  "formula": "If (result in [GROUNDOUT,FLYOUT,STRIKEOUT]) => InningHalf.recordOut(); If (result in [SINGLE,DOUBLE,TRIPLE,HOMERUN, etc.]) => InningHalf.scoreRun(rbi);"
                }
              ],
              "constraints": []
            },
            {
              "name": "Pitch",
              "description": "Represents a single pitch thrown in an at-bat. Tracks velocity, location, outcome, etc.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique ID for this pitch record."
                },
                {
                  "name": "atBatId",
                  "type": "lookup",
                  "target_entity": "AtBat",
                  "foreign_key": true,
                  "description": "Which at-bat this pitch belongs to."
                },
                {
                  "name": "pitchResult",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "One of 'BALL','CALLED_STRIKE','SWINGING_STRIKE','FOUL','IN_PLAY','HIT_BY_PITCH', etc."
                },
                {
                  "name": "pitchVelocity",
                  "type": "scalar",
                  "datatype": "number",
                  "description": "Speed of the pitch, typically in mph or km/h."
                },
                {
                  "name": "pitchSpinRate",
                  "type": "scalar",
                  "datatype": "number",
                  "description": "(NEW #20) Spin rate of the pitch in revolutions per minute (rpm)."
                }
              ],
              "lookups": [],
              "aggregations": [],
              "lambdas": [],
              "constraints": []
            },
            {
              "name": "Statistic",
              "description": "Generic or specialized statistical measures referencing a Player, Team, or entire league. Could store advanced sabermetrics or simpler metrics.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique ID for this stat record."
                },
                {
                  "name": "entityType",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "Indicates whether this stat applies to 'Player','Team','League'."
                },
                {
                  "name": "entityId",
                  "type": "lookup",
                  "target_entity": "*",
                  "foreign_key": false,
                  "description": "ID of the specific entity (player/team/league) to which the stat belongs. Implementation conceptual."
                },
                {
                  "name": "statName",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "E.g. 'OPS','ERA','WAR','fieldingPercentage'."
                },
                {
                  "name": "statValue",
                  "type": "scalar",
                  "datatype": "number",
                  "description": "Numeric result of the stat calculation."
                },
                {
                  "name": "season",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "Optional label for which season or time period this stat references."
                },
                {
                  "name": "lastUpdated",
                  "type": "scalar",
                  "datatype": "datetime",
                  "description": "(NEW #21) Timestamp indicating when this stat was last updated."
                }
              ],
              "lookups": [],
              "aggregations": [],
              "lambdas": [],
              "constraints": []
            },
            {
              "name": "Stadium",
              "description": "(NEW #22) Represents a ballpark or stadium where games are played.",
              "fields": [
                {
                  "name": "id",
                  "type": "scalar",
                  "datatype": "string",
                  "primary_key": true,
                  "description": "Unique ID for this stadium."
                },
                {
                  "name": "stadiumName",
                  "type": "scalar",
                  "datatype": "string",
                  "description": "The official or common name of the stadium."
                },
                {
                  "name": "capacity",
                  "type": "scalar",
                  "datatype": "integer",
                  "description": "Maximum seating capacity of the stadium."
                }
              ],
              "lookups": [],
              "aggregations": [
                {
                  "name": "gamesPlayedInStadium",
                  "type": "rollup",
                  "description": "(NEW #23) The number of games that have taken place in this stadium. Implementation conceptual, would require a link from Game to Stadium.",
                  "formula": "COUNT(Game where Game.stadiumId = this.id)"
                },
                {
                  "name": "averageAttendance",
                  "type": "rollup",
                  "description": "(NEW #24) Average attendance across all games played here. Implementation conceptual.",
                  "formula": "AVG(GameAttendanceRecords where stadiumId=this.id)"
                }
              ],
              "lambdas": [],
              "constraints": []
            }
          ]
        },
        "data": {
          "League": [
            {
              "id": "league_MLB",
              "leagueName": "Major League Baseball"
            }
          ],
          "Team": [
            {
              "id": "team_NYY",
              "teamName": "Yankees",
              "league_id": "league_MLB"
            },
            {
              "id": "team_BOS",
              "teamName": "Red Sox",
              "league_id": "league_MLB"
            }
          ],
          "Player": [
            {
              "id": "player_101",
              "fullName": "John Pitcher",
              "battingHand": "R",
              "throwingHand": "R",
              "team_id": "team_NYY"
            },
            {
              "id": "player_102",
              "fullName": "Mike Slugger",
              "battingHand": "L",
              "throwingHand": "R",
              "team_id": "team_BOS"
            }
          ],
          "DefensivePosition": [
            {
              "id": "1",
              "positionName": "Pitcher"
            },
            {
              "id": "2",
              "positionName": "Catcher"
            },
            {
              "id": "6",
              "positionName": "Shortstop"
            },
            {
              "id": "DH",
              "positionName": "Designated Hitter"
            }
          ],
          "Game": [
            {
              "id": "game_2025_03_13",
              "homeTeamId": "team_NYY",
              "awayTeamId": "team_BOS",
              "status": "SCHEDULED"
            }
          ],
          "Inning": [],
          "InningHalf": [],
          "AtBat": [],
          "Pitch": [],
          "Statistic": [
            {
              "id": "stat_001",
              "entityType": "Player",
              "entityId": "player_101",
              "statName": "ERA",
              "statValue": 3.45,
              "season": "2025",
              "lastUpdated": "2025-03-01T10:00:00Z"
            },
            {
              "id": "stat_002",
              "entityType": "Player",
              "entityId": "player_102",
              "statName": "BattingAverage",
              "statValue": 0.285,
              "season": "2025",
              "lastUpdated": "2025-03-02T14:30:00Z"
            }
          ],
          "Stadium": [
            {
              "id": "stadium_001",
              "stadiumName": "Yankee Stadium",
              "capacity": 50000
            }
          ]
        }
      },
    "root-meta-model": {
      "title": "The Conceptual Model Completeness Conjecture (CMCC)",
      "subtitle": "A Universal Declarative Computational Framework",
      "authors": [
        {
          "name": "EJ Alexandra",
          "contact": "start@anabstractlevel.com",
          "affiliations": [
            "SSoT.me",
            "EffortlessAPI.com"
          ]
        }
      ],
      "date": "January 2025",
      "abstract": "The Conceptual Model Completeness Conjecture (CMCC) posits that the declarative semantics of any conceptual model can be captured using five fundamental primitives—Schema (S), Data (D), Lookups (L), Aggregations (A), and Lambda Calculated Fields (F)—within an Snapshot-Consistent environment. Demonstrating Turing-completeness and aligning with Wolfram’s multiway systems, CMCC provides a universal substrate for modeling domains ranging from physics and biology to business rules and beyond. This paper formalizes CMCC’s theoretical foundations, presents diverse cross-domain examples, and outlines future directions for building a unified computational framework.",
      "executive_summary": {
        "key_points": [
          "CMCC proposes that five primitives (S, D, L, A, F) suffice to model all computable domain rules.",
          "It achieves Turing-completeness by mapping to Lambda Calculus and Rule 110.",
          "Aligns structurally with Wolfram’s multiway systems (the Ruliad).",
          "Demonstrates broad applicability in Physics, Chemistry, Biology, Math, and now Baseball.",
          "A purely declarative approach: 'what' is separate from 'how' (the runtime)."
        ],
        "implications": [
          "Potential unification of domain modeling under a single declarative rulebook.",
          "Scalable approach to cross-domain data management and knowledge representation.",
          "Opens possibilities for AI, simulation, and multiway branching analyses, including advanced sports analytics."
        ],
        "narrative": {
          "sections": [
            {
              "title": "Executive Summary",
              "content": [
                "In many domains, describing “what” we want—a baseball rule, a financial regulation, or a quantum property—involves restating ideas in code or in plain English. This leads to repeated translations and potential drift over time. CMCC posits that one robust structural approach (S, D, L, A, F) can house all these rules unambiguously.",
                "Baseball offers a perfect demonstration. We can treat everything from lineups, innings, and pitch counts to advanced sabermetrics as purely declarative relationships and aggregator formulas. This eliminates the need for specialized DSLs or complicated code to track outs, runs, or situational stats. Once the baseball domain is structurally modeled, other systems—fan apps, analytics platforms, fantasy leagues—can re-use the same data model, preventing logic duplication and divergences.",
                "In short, by applying CMCC to baseball, we illustrate a real-world, data-rich domain that historically relied on heavily textual or code-based rule sets. Storing the entire domain as an integrated, schema-driven knowledge graph with aggregator fields and lambda-based logic truly aligns with the universal approach championed by CMCC."
              ]
            }
          ]
        },
        "CMCC_ToEMM_Domain_List": [
          {
            "id": "CMCC_ToEMM_Baseball",
            "fullname": "Baseball ToE Meta-Model",
            "name": "Baseball ToE Meta-Model",
            "description": "A structured model capturing the domain of baseball, including leagues, teams, players, games, innings, at-bats, and stats.",
            "nickname": "baseball"
          },
          {
            "id": "CMCC_ToEMM_Math",
            "fullname": "Mathematics ToE Meta-Model",
            "name": "Mathematics ToE Meta-Model",
            "description": "A structured model covering foundational mathematics, including sets, functions, proofs, structures, and category theory.",
            "nickname": "math"
          },
          {
            "id": "CMCC_ToEMM_Physics",
            "fullname": "Physics ToE Meta-Model",
            "name": "Physics ToE Meta-Model",
            "description": "A unified model for physics, including classical mechanics, quantum mechanics, gauge fields, wavefunctions, relativity, and black hole dynamics.",
            "nickname": "physics"
          },
          {
            "id": "CMCC_ToEMM_Chemistry",
            "fullname": "Chemistry ToE Meta-Model",
            "name": "Chemistry ToE Meta-Model",
            "description": "Extends the Physics TOE with atomic structures, molecular interactions, bonds, and chemical reactions.",
            "nickname": "chemistry"
          },
          {
            "id": "CMCC_ToEMM_Biology",
            "fullname": "Biology ToE Meta-Model",
            "name": "Biology ToE Meta-Model",
            "description": "Bridges Chemistry and Physics TOEs to model biological systems, including genes, proteins, metabolism, and cellular structures.",
            "nickname": "biology"
          },
          {
            "id": "CMCC_ToEMM_AI",
            "fullname": "Artificial Intelligence ToE Meta-Model",
            "name": "Artificial Intelligence ToE Meta-Model",
            "description": "Encapsulates machine learning, neural networks, training datasets, reinforcement learning, and inference mechanisms.",
            "nickname": "ai"
          },
          {
            "id": "CMCC_ToEMM_Economics",
            "fullname": "Economics ToE Meta-Model",
            "name": "Economics ToE Meta-Model",
            "description": "A computational model for economic agents, markets, transactions, and supply-demand constraints.",
            "nickname": "economics"
          },
          {
            "id": "CMCC_ToEMM_Astronomy",
            "fullname": "Astronomy ToE Meta-Model",
            "name": "Astronomy ToE Meta-Model",
            "description": "An extension of the Physics TOE to model celestial bodies, star systems, orbital dynamics, and large-scale cosmic structures.",
            "nickname": "astronomy"
          },
          {
            "id": "CMCC_ToEMM_Geology",
            "fullname": "Geology oE Meta-Model",
            "name": "Geology",
            "description": "A model integrating physics and chemistry to represent minerals, rock formations, and tectonic processes.",
            "nickname": "geology"
          },
          {
            "id": "CMCC_ToEMM_Medicine",
            "fullname": "Medicine and Healthcare ToE Meta-Model",
            "name": "Medicine & Healthcare ToE Meta-Model",
            "description": "A unified model capturing foundational aspects of medicine and healthcare, including patient records, clinical trial data, treatment plans, and analytics.",
            "nickname": "medicine"
          },
          {
            "id": "CMCC_ToEMM_Legal",
            "fullname": "Legal Systems & Compliance ToE Meta-Model",
            "name": "Legal Systems & Compliance ToE Meta-Model",
            "description": "A unified model for legal systems, contracts, statutory frameworks, and regulatory compliance.",
            "nickname": "legal"
          },
          {
            "id": "CMCC_ToEMM_Climate",
            "fullname": "Climate Science and Environmental Modeling ToE Meta-Model",
            "name": "Climate Science ToE Meta-Model",
            "description": "A unified model for climate science and environmental modeling, capturing climate variables, ecosystems, pollution sources, and environmental data.",
            "nickname": "climate"
          },
          {
            "id": "CMCC_ToEMM_Cybersecurity",
            "fullname": "Cybersecurity ToE Meta-Model",
            "name": "Cybersecurity ToE Meta-Model",
            "description": "A unified model for cybersecurity covering threat models, vulnerabilities, IT asset mappings, incident logs, and security audits.",
            "nickname": "cybersecurity"
          },
          {
            "id": "CMCC_ToEMM_Sociology",
            "fullname": "Sociology and Anthropology ToE Meta-Model",
            "name": "Sociology & Anthropology ToE Meta-Model",
            "description": "A structured model capturing social structures, cultural norms, and interaction networks using survey data, demographic records, and social network relationships.",
            "nickname": "sociology"
          }
        ]
      }
    }
  }
}